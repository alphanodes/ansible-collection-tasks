---
- name: Set tmp file for dump
  ansible.builtin.set_fact:
    tmp_postgres_dump_file: "{{ project_sync_tmp_dir }}/_postgresql_{{ date_stamp }}.dump"

- name: Check if hostname is defined
  ansible.builtin.fail:
    msg: 'if no host name is defined, db_source_name and db_target_name has to be different.'
  when:
    - source_host | length == 0
    - instance.db_source_name == instance.db_target_name

# see https://docs.ansible.com/ansible/latest/collections/community/postgresql/postgresql_db_module.html
- name: Create postgresql database local dump - {{ instance.name }}
  community.postgresql.postgresql_db:
    name: '{{ instance.db_source_name }}'
    target: '{{ tmp_postgres_dump_file }}'
    dump_extra_args: '{{ project_sync_postgresql_dump_options }}'
    state: dump
  become_user: postgres
  become: true
  when: source_host | length == 0

- name: Create postgresql database dump on remote host - {{ instance.name }}
  ansible.builtin.shell: >
    ssh {{ ssh_source_options + ' ' if ssh_source_options != '' else '' }}{{ source_host }}
    'su -l postgres -c "pg_dump {{ project_sync_postgresql_dump_options }}
    {{ instance.db_source_name }} > {{ tmp_postgres_dump_file }}"'
  when: source_host | length > 0

- name: Transfer database dump to host - {{ instance.name }}
  ansible.builtin.command: >
    scp {{ scp_source_options + ' ' if scp_source_options != '' else '' }}{{ source_host }}:{{ tmp_postgres_dump_file }}
    {{ tmp_postgres_dump_file }}
  when: source_host | length > 0

- name: Cleanup remote tmp file - {{ instance.name }}
  ansible.builtin.command: ssh {{ ssh_source_options + ' ' if ssh_source_options != '' else '' }}{{ source_host }} rm {{ tmp_postgres_dump_file }}
  when: source_host | length > 0

- name: Drop database - {{ instance.name }}
  become_user: postgres
  become: true
  community.postgresql.postgresql_db:
    name: '{{ instance.db_target_name }}'
    state: absent
  when: project_sync_recreate_db

- name: Check if instance.db_target_owner is defined for project_sync_recreate_db
  ansible.builtin.fail:
    msg: 'instance.db_target_owner is not defined, but required'
  when:
    - project_sync_recreate_db
    - instance.db_target_owner is undefined

- name: Create database - {{ instance.name }}
  become_user: postgres
  become: true
  community.postgresql.postgresql_db:
    name: '{{ instance.db_target_name }}'
    owner: '{{ instance.db_target_owner }}'
    state: present
  when: project_sync_recreate_db

- name: Run pre sql commands for PostgreSQL - {{ instance.name }}
  become_user: postgres
  become: true
  community.postgresql.postgresql_query:
    query: '{{ item }}'
    login_host: '{{ instance.db_source_host | default(omit) }}'
    login_user: '{{ instance.db_target_owner }}'
    login_db: '{{ instance.db_target_name }}'
    port: '{{ instance.db_source_port | default(omit) }}'
  loop: '{{ instance.pre_sql_commands | default([]) }}'

- name: Import database dump - {{ instance.name }}
  become_user: postgres
  become: true
  community.postgresql.postgresql_db:
    name: '{{ instance.db_target_name }}'
    target: '{{ tmp_postgres_dump_file }}'
    target_opts: "{{ project_sync_postgresql_restore_options }}"
    login_host: '{{ instance.db_source_host | default(omit) }}'
    login_user: '{{ instance.db_target_owner }}'
    owner: '{{ instance.db_target_owner | default(omit) }}'
    state: restore

- name: Cleanup local tmp file - {{ instance.name }}
  ansible.builtin.file:
    path: '{{ tmp_postgres_dump_file }}'
    state: absent

- name: Run post sql commands for PostgreSQL - {{ instance.name }}
  become_user: postgres
  become: true
  community.postgresql.postgresql_query:
    query: '{{ item }}'
    login_host: '{{ instance.db_source_host | default(omit) }}'
    login_user: '{{ instance.db_target_owner }}'
    login_db: '{{ instance.db_target_name }}'
    port: '{{ instance.db_source_port | default(omit) }}'
  loop: '{{ instance.post_sql_commands | default([]) }}'
