---
- name: Set facts
  ansible.builtin.set_fact:
    rollout_with_updatedb: "{{ instance.rollout_with_updatedb | default(drupal_rollout_with_updatedb) }}"
    rollout_with_entity_updates: "{{ instance.rollout_with_entity_updates | default(drupal_rollout_with_entity_updates) }}"
    rollout_with_cron: "{{ instance.rollout_with_cron | default(drupal_rollout_with_cron) }}"
    rollout_with_cache_clear: "{{ instance.rollout_with_cache_clear | default(drupal_rollout_with_cache_clear) }}"
    rollout_with_cim: "{{ instance.rollout_with_cim | default(drupal_rollout_with_cim) }}"
    real_composer_path: "{{ instance.composer_path | default('') }}"
    real_vhost_dir: "{{ instance.dir }}{{ instance.vhost_dir | default(drupal_vhost_dir) }}"

- name: Set real_composer_bin - {{ instance.name }}
  ansible.builtin.set_fact:
    real_composer_bin: "{{ real_composer_path }}{{ '' if real_composer_path == '' else '/' }}composer"

- name: Fix permissions before checkout
  block:
    - name: Check for settings.prod.php
      ansible.builtin.stat:
        path: "{{ real_vhost_dir }}/sites/default/settings.php"
      register: settings_php

    - name: Check for settings.prod.php
      ansible.builtin.stat:
        path: "{{ real_vhost_dir }}/sites/default/settings.prod.php"
      register: settings_prod_php

    - name: Fix sites/default permission
      ansible.builtin.file:
        path: "{{ real_vhost_dir }}/sites/default"
        owner: "{{ instance.drupal_user | default(omit) }}"
        mode: '0755'
        state: directory

    - name: Fix settings.php owner and permission
      ansible.builtin.file:
        path: "{{ settings_php.stat.path }}"
        owner: "{{ instance.drupal_user | default(omit) }}"
        mode: '0644'
        state: file
      when: settings_php.stat.exists

    - name: Fix settings.prod.php owner and permission
      ansible.builtin.file:
        path: "{{ settings_prod_php.stat.path }}"
        owner: "{{ instance.drupal_user | default(omit) }}"
        mode: '0644'
        state: file
      when: settings_prod_php.stat.exists

- name: Run rollout tasks
  become: '{{ true if instance.drupal_user is defined else false }}'
  become_user: '{{ instance.drupal_user | default("") }}'
  when: >
    (mysql_replication_role is undefined or mysql_replication_role == 'master')
    and sync_master is undefined
  block:
    - name: Run git clone/pull - {{ instance.name }}
      ansible.builtin.git:
        repo: '{{ instance.repo }}'
        dest: '{{ instance.dir }}'
        version: '{{ instance.repo_version | default(omit) }}'
        force: '{{ instance.force_update | default(omit) }}'
        accept_hostkey: true
      register: git_result

    - name: Run composer
      when: >
        instance.rollout_with_composer is defined
        and instance.rollout_with_composer
      block:
        - name: Run composer - {{ instance.name }}
          ansible.builtin.command: '{{ real_composer_bin }} {{ instance.composer_params | default(drupal_composer_params) }}'
          args:
            chdir: "{{ instance.composer_json_path | default(instance.dir + drupal_vhost_dir) }}"
          register: composer_result
          changed_when: composer_result.rc != 0

        - name: Output of composer - {{ instance.name }}
          ansible.builtin.debug:
            var: composer_result.stdout_lines
          when: composer_result.stdout_lines | length > 0

        - name: Output of composer errors (stderr) - {{ instance.name }}
          ansible.builtin.debug:
            var: composer_result.stderr_lines
          when: composer_result.stderr_lines | length > 0

    - name: Run drush status
      when: drupal_rollout_with_drush_status
      block:
        - name: Run drush status - {{ instance.name }}
          ansible.builtin.command: '{{ instance.drush_path | default(drush_path) }} @{{ instance.name }} status'
          args:
            chdir: "{{ instance.dir }}"
          register: status_result
          changed_when: status_result.rc != 0

        - name: Output of drush status - {{ instance.name }}
          ansible.builtin.debug:
            var: status_result.stdout_lines
          when: status_result.stdout_lines | length > 0

        - name: Output of drush status errors (stderr) - {{ instance.name }}
          ansible.builtin.debug:
            var: status_result.stderr_lines
          when: status_result.stderr_lines | length > 0

    - name: Run db update
      when: rollout_with_updatedb
      block:
        - name: Run updatedb - {{ instance.name }}
          ansible.builtin.command: '{{ instance.drush_path | default(drush_path) }} @{{ instance.name }} --yes updatedb -v'
          args:
            chdir: "{{ instance.dir }}"
          register: update_result
          changed_when: update_result.rc != 0

        - name: Output of updatedb - {{ instance.name }}
          ansible.builtin.debug:
            var: update_result.stdout_lines
          when: update_result.stdout_lines | length > 0

        - name: Output of updatedb errors (stderr) - {{ instance.name }}
          ansible.builtin.debug:
            var: update_result.stderr_lines
          when: update_result.stderr_lines | length > 0

    - name: Run entity-updates
      when: rollout_with_entity_updates
      block:
        - name: Run entity-updates - {{ instance.name }}
          ansible.builtin.command: '{{ instance.drush_path | default(drush_path) }} @{{ instance.name }} --yes entity-updates'
          register: entity_result
          changed_when: entity_result.rc != 0

        - name: Output of entity-updates - {{ instance.name }}
          ansible.builtin.debug:
            var: entity_result.stdout_lines
          when: entity_result.stdout_lines | length > 0

        - name: Output of entity-updates (stderr) - {{ instance.name }}
          ansible.builtin.debug:
            var: entity_result.stderr_lines
          when: entity_result.stderr_lines | length > 0

    - name: Run config import
      when: >
        (instance.with_cim is defined and instance.with_cim)
        or drupal_rollout_with_cim
      block:
        - name: Run config import - {{ instance.name }}
          ansible.builtin.command: '{{ instance.drush_path | default(drush_path) }} @{{ instance.name }} --yes cim'
          args:
            chdir: "{{ real_vhost_dir }}"
          register: cim_result
          changed_when: cim_result.rc != 0

        - name: Output of cim - {{ instance.name }}
          ansible.builtin.debug:
            var: cim_result.stdout_lines
          when: cim_result.stdout_lines | length > 0

        - name: Output of cim (stderr) - {{ instance.name }}
          ansible.builtin.debug:
            var: cim_result.stderr_lines
          when: cim_result.stderr_lines | length > 0

    - name: Run cache-rebuild
      when: rollout_with_cache_clear
      block:
        - name: Run cache-rebuild - {{ instance.name }}
          ansible.builtin.command: '{{ instance.drush_path | default(drush_path) }} @{{ instance.name }} cache-rebuild'
          register: cache_result

        - name: Output of cache-rebuild - {{ instance.name }}
          ansible.builtin.debug:
            var: cache_result.stdout_lines
          when: cache_result.stdout_lines | length > 0

        - name: Output of cache-rebuild (stderr) - {{ instance.name }}
          ansible.builtin.debug:
            var: cache_result.stderr_lines
          when: cache_result.stderr_lines | length > 0

    - name: Run cron
      when: rollout_with_cron
      block:
        - name: Run cron - {{ instance.name }}
          ansible.builtin.command: '{{ instance.drush_path | default(drush_path) }} @{{ instance.name }} cron'
          register: cron_result
          ignore_errors: true

        - name: Output of cron - {{ instance.name }}
          ansible.builtin.debug:
            var: cron_result.stdout_lines
          when: cron_result.stdout_lines | length > 0

        - name: Output of cron (stderr) - {{ instance.name }}
          ansible.builtin.debug:
            var: cron_result.stderr_lines
          when: cron_result.stderr_lines | length > 0
